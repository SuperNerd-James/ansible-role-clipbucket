#!/bin/sh

# Exit immediately on error
set -e

export DISPLAY=":1"
ansible-playbook --connection local -i "localhost," tests/install_selenium.yml \
  --extra-vars "virtual_display=${DISPLAY}"

# Pull existing container
sudo docker pull ${distribution}:${version}

# Customize container
sudo docker build \
  --rm=true \
  --file=tests/Dockerfile.${distribution}-${version} \
  --tag=${distribution}-${version}:ansible tests

# Run container in detached state
id_file=$(mktemp)
sudo docker run \
  --detach \
  --volume="${PWD}":/etc/ansible/roles/role_under_test:ro \
  ${distribution}-${version}:ansible ${init} > "${id_file}"
container_id="$(cat $id_file)"
echo "Container ID:" "${container_id}"

# Install dependencies.
sudo docker exec "${container_id}" \
  ansible-galaxy install \
    -r /etc/ansible/roles/role_under_test/tests/requirements.yml

# Ansible syntax check.
sudo docker exec "${container_id}" \
  env TERM=xterm \
  ansible-playbook /etc/ansible/roles/role_under_test/tests/install.yml \
    --syntax-check

# Ansible lint check.
sudo docker exec "${container_id}" \
  env TERM=xterm \
  ansible-lint /etc/ansible/roles/role_under_test/tests/install.yml \
    --exclude /etc/ansible/roles/geerlingguy.apache \
    --exclude /etc/ansible/roles/geerlingguy.php \
    --exclude /etc/ansible/roles/pcextreme.mariadb

# Check that role installs successfully.
export admin_user="testadmin"
export admin_password="testpw123"
sudo docker exec "${container_id}" \
  env TERM=xterm \
  ansible-playbook /etc/ansible/roles/role_under_test/tests/install.yml \
    --extra-vars "clipbucket_admin_user=${admin_user}" \
    --extra-vars "clipbucket_admin_password=${admin_password}"

# Test role idempotence.
idempotence_file=$(mktemp)
sudo docker exec "${container_id}" \
  env TERM=xterm \
  ansible-playbook /etc/ansible/roles/role_under_test/tests/install.yml \
  | tee "${idempotence_file}"
grep -q 'changed=0.*failed=0' "${idempotence_file}" && \
  (echo 'Idempotence test: pass' && exit 0) || \
  (echo 'Idempotence test: fail' && exit 1)

# Check that Clipbucket landing page is up
print_ip_python=$(echo "import sys, json;
print json.load(sys.stdin)[0]['NetworkSettings']['IPAddress']")
container_ip=$(sudo docker inspect "${container_id}" | \
  python -c "${print_ip_python}")
echo "Container IP Address:" "${container_ip}"

python tests/drive_web_flow_main.py \
  --url http://"${container_ip}" \
  --username "${admin_user}" \
  --password "${admin_password}"

# Clean up
sudo docker stop "${container_id}"
sudo docker rm "${container_id}"
